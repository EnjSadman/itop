{"version":3,"sources":["api/api.js","components/Converter/Converter.tsx","components/Header/Header.tsx","App.tsx","index.tsx"],"names":["fetcher","a","fetch","result","json","Converter","exchangeCourse","useState","firstCurrency","setFirstCurrency","amountOfFirstCurrency","setAmountOfFirstCurrency","secondCurrency","setSecondCurrency","amountOfSecondCurrency","setAmountOfSecondCurrency","className","name","value","onChange","event","target","roundToHundreds","type","placeholder","isNaN","Header","num","amountOfCurrency","Math","round","App","setExchangeCourse","useEffect","conversion_rates","getServerResponse","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.34efcb8c.chunk.js","sourcesContent":["const BASE_PATH = 'https://v6.exchangerate-api.com/v6/';\nconst API_KEY = '07644e766c705c511537d423'\n\nexport const fetcher = async () => {\n  const result = await fetch(`${BASE_PATH}/${API_KEY}/latest/UAH`);\n\n  return result.json()\n} ","import React, { useState } from \"react\";\nimport { roundToHundreds } from \"../../App\";\nimport { Currency } from \"../../react-app-env\";\nimport './Converter.scss';\n\ninterface Props {\n  exchangeCourse: Currency;\n}\n\nexport const Converter : React.FC<Props> = ({ exchangeCourse }) => {\n  const [firstCurrency, setFirstCurrency] = useState<string>('UAH');\n  const [amountOfFirstCurrency, setAmountOfFirstCurrency] = useState(0);\n  const [secondCurrency, setSecondCurrency] = useState<string>('USD');\n  const [amountOfSecondCurrency, setAmountOfSecondCurrency] = useState(0);\n\n  return (\n    <div>\n      <div className=\"converter\">\n        <div className=\"converter__field\">\n          <select\n            className=\"converter__currency\"\n            name=\"currency\"\n            value={firstCurrency}\n            onChange={(event) => {\n              setFirstCurrency(event.target.value);\n              if (+exchangeCourse[event.target.value] !== 1 && +exchangeCourse[secondCurrency] === 1) {\n                setAmountOfSecondCurrency(roundToHundreds(amountOfFirstCurrency / +exchangeCourse[event.target.value] * (+exchangeCourse[secondCurrency])))\n              } else {\n                setAmountOfSecondCurrency(roundToHundreds(amountOfFirstCurrency * +exchangeCourse[event.target.value] / (+exchangeCourse[secondCurrency])))\n              }\n            }}\n          >\n            <option value=\"USD\">\n              USD\n            </option>\n            <option value=\"EUR\">\n              EUR\n            </option>\n            <option value=\"UAH\">\n              UAH\n            </option>\n          </select>\n          <input\n            className=\"converter__input\"\n            type=\"text\"\n            placeholder=\"Amount\"\n            value={amountOfFirstCurrency}\n            onChange={(event) => {\n              if (!isNaN(+event.target.value)) {\n                setAmountOfFirstCurrency(+event.target.value);\n                if (+exchangeCourse[firstCurrency] !== 1 && +exchangeCourse[firstCurrency] === 1) {\n                  setAmountOfSecondCurrency(roundToHundreds(+event.target.value / +exchangeCourse[firstCurrency] / (+exchangeCourse[secondCurrency])))\n                } else {\n                  setAmountOfSecondCurrency(roundToHundreds(+event.target.value / +exchangeCourse[firstCurrency] * (+exchangeCourse[secondCurrency])))\n                }\n              }\n            }}\n          />\n        </div>\n        <div className=\"converter__field\">\n          <select\n            className=\"converter__currency\"\n            name=\"currency\"\n            value={secondCurrency}\n            onChange={(event) => {\n              setSecondCurrency(event.target.value);\n              if (+exchangeCourse[event.target.value] !== 1 && +exchangeCourse[firstCurrency] === 1) {\n                setAmountOfFirstCurrency(roundToHundreds(amountOfSecondCurrency / +exchangeCourse[event.target.value] * (+exchangeCourse[firstCurrency])))\n              } else {\n                setAmountOfFirstCurrency(roundToHundreds(amountOfSecondCurrency * +exchangeCourse[event.target.value] / (+exchangeCourse[firstCurrency])))\n              }\n            }}\n          >\n            <option value=\"USD\">\n              USD\n            </option>\n            <option value=\"EUR\">\n              EUR\n            </option>\n            <option value=\"UAH\">\n              UAH\n            </option>\n          </select>\n          <input\n            type=\"text\"\n            className=\"converter__input\"\n            placeholder=\"Amount\"\n            value={amountOfSecondCurrency}\n            onChange={(event) => {\n              if (!isNaN(+event.target.value)) {\n                setAmountOfSecondCurrency(+event.target.value);\n                if (+exchangeCourse[secondCurrency] !== 1 && +exchangeCourse[firstCurrency] === 1) {\n                  setAmountOfFirstCurrency(roundToHundreds(+event.target.value / +exchangeCourse[secondCurrency] / (+exchangeCourse[firstCurrency])))\n                } else {\n                  setAmountOfFirstCurrency(roundToHundreds(+event.target.value / +exchangeCourse[firstCurrency] * (+exchangeCourse[secondCurrency])))\n                }\n              }\n            }}\n          />\n        </div>\n      </div>\n    </div>\n  )\n}\n","import React from \"react\";\nimport { roundToHundreds } from \"../../App\";\nimport { Currency } from \"../../react-app-env\";\nimport './Header.scss'\n\ninterface Props {\n  exchangeCourse:Currency,\n}\n\nexport const Header : React.FC<Props> = ({ exchangeCourse }) => {\n\n  return (\n    <header className=\"header\">\n      <div className=\"header__container\">\n        <h1 className=\"header__currency\">{roundToHundreds(1 / +exchangeCourse[\"USD\"])} UAH per USD</h1>\n        <h1 className=\"header__currency\">{roundToHundreds(1 / +exchangeCourse[\"EUR\"])} UAH per EUR</h1>\n      </div>\n    </header>\n  )\n}","import React, { useEffect, useState } from 'react';\nimport { fetcher } from './api/api';\nimport './App.scss';\nimport { Converter } from './components/Converter/Converter';\nimport { Header } from './components/Header/Header';\nimport { Currency } from './react-app-env';\n\nexport function roundToHundreds(num : number) {\n  let amountOfCurrency = num;\n    amountOfCurrency = Math.round(amountOfCurrency * 100) / 100  \n\n  return amountOfCurrency;\n}\n\nexport const App: React.FC = () => {\n\n  const [exchangeCourse, setExchangeCourse] = useState<Currency>({});\n\n  useEffect(() => {\n    const getServerResponse = async () => {\n      const result = await fetcher();\n\n      setExchangeCourse(result.conversion_rates)\n    }\n    getServerResponse();\n  }, []);\n\n  return (\n    <div className='container'>    \n      <Header exchangeCourse={exchangeCourse}/>\n      <Converter exchangeCourse={exchangeCourse}/> \n    </div>\n  );\n};\n\n//\n//","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}